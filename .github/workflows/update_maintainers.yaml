name: Update MAINTAINERS.yaml

on:
  pull_request:
    types: [closed]
    paths:
      - 'CODEOWNERS'

jobs:
  update-maintainers:
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: master
          path: current_state

      - name: Checkout one commit before last one
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          ref: master
          path: previous_state

      - run: cd previous_state && git checkout HEAD^

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install js-yaml
        run: npm install js-yaml@3.14.1

      - name: Install @octokit/rest
        run: npm install @octokit/rest

      - name: Compare CODEOWNERS
        id: compare-codeowners
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            // Get repository name
            const repoName = context.repo.repo;

            function extractGitHubUsernames(content) {
              const regex = /@([a-zA-Z0-9_-]+)/g;
              const matches = content.match(regex);
              if (!matches) {
                return [];
              }
              return matches.map(match => match.substr(1));
            }
      
            const mainCodeowners = fs.readFileSync('./current_state/CODEOWNERS', 'utf8');
            const prCodeowners = fs.readFileSync('./previous_state/CODEOWNERS', 'utf8');
      
            const mainUsernames = extractGitHubUsernames(mainCodeowners);
            const prUsernames = extractGitHubUsernames(prCodeowners);

            const addedUsernames = mainUsernames.filter(username => !prUsernames.includes(username));
            const removedUsernames = prUsernames.filter(username => !mainUsernames.includes(username));
            console.log('Added Usernames:', addedUsernames);
            console.log('Removed Usernames:', removedUsernames);
            console.log(`ADDED_USERNAMES=${addedUsernames.join(', ')}`);
            console.log(`REMOVED_USERNAMES=${removedUsernames.join(', ')}`);

            // Update MAINTAINERS.yaml
            const maintainersFile = './current_state/MAINTAINERS.yaml';
            const maintainers = yaml.safeLoad(fs.readFileSync(maintainersFile, 'utf8'));

            const { Octokit } = require("@octokit/rest");

            const octokit = new Octokit({
              auth: process.env.GITHUB_TOKEN,
              request: {
                fetch: (url, options) => fetch(url, options)
              }
            });

            // Update for added usernames
            addedUsernames.forEach(username => {
              const { data } = await octokit.users.getByUsername({ username });
              const twitterUsername = data.twitter_username;

              // Exclude bot accounts
              if (username === 'asyncapi-bot' || username === 'asyncapi-bot-eve') {
                console.log('Skipping bot account:', username);
                return; // Skip the iteration for bot accounts
              }
              const existingMaintainer = maintainers.find(maintainer => maintainer.github === username);
              if (!existingMaintainer) {
                maintainers.push({
                  github: username,
                  twitter: twitterUsername,
                  isTscMember: false,
                  repos: [repoName]
                });
                console.log('Added maintainer:', username);
              } else {
                console.log('Maintainer', username, 'already exists. Skipping addition.');
              }
            });

            // Update for removed usernames
            removedUsernames.forEach(username => {
              const index = maintainers.findIndex(maintainer => maintainer.github === username);
              if (index !== -1) {
                const maintainer = maintainers[index];
                const repoIndex = maintainer.repos.indexOf(repoName);
            
                if (repoIndex !== -1) {
                  maintainer.repos.splice(repoIndex, 1);
                  console.log(`Removed repository ${repoName} from maintainer ${username}`);
            
                  if (maintainer.repos.length === 0) {
                    maintainers.splice(index, 1);
                    console.log(`Removed maintainer ${username} as they have no other repositories`);
                  }
                } else {
                  console.log(`Repository ${repoName} not found for maintainer ${username}`);
                }
              } else {
                console.log(`Maintainer ${username} does not exist. Skipping removal.`);
              }
            });

            // Write updated MAINTAINERS.yaml file
            const updatedMaintainers = yaml.safeDump(maintainers);
            fs.writeFileSync(maintainersFile, updatedMaintainers);
            console.log('Updated MAINTAINERS.yaml:', updatedMaintainers);

      - name: Commit and push
        working-directory: ./current_state
        run: |
          git add .
          git commit -m "Update MAINTAINERS.yaml"
          git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} master

      - name: Create PR
        working-directory: ./current_state
        run: |
          gh pr create --title "docs(community): update latest maintainers list" --body "Updated Maintainers list is available and this PR introduces changes with latest information about Maintainers" --head "update-maintainers-${{ github.head_ref }}"

      - name: Report workflow run status to Slack
        if: failure() # Only, on failure, send a message on the slack channel
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_CI_FAIL_NOTIFY }}
          SLACK_TITLE: ðŸš¨ Update maintainers list action failed ðŸš¨
          SLACK_MESSAGE: Failed to update the maintainers list.
          MSG_MINIMAL: true
